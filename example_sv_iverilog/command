iverilog 的使用和 GCC 比较类似，都可以用 -o 选项来指定输出文件，编译时也需要提供全部相关文件的绝对或相对路径，编译以上测试工程使用的命令如下：

iverilog -o run.out test.v add.v

编译后会生成被指定的目标可执行文件 run.out ，但此文件执行后只会在终端上显示仿真时文字信息，需要使用 vvp 工具将其可视化成 .vcd 文件。命令如下：

vvp -n run.out

其中 -n 选项表示运行完退出，以便进行下一步操作。可见执行了 vvp 命令后生成了 test.vcd 文件，可以用 GTKwave 打开并显示出波形。命令如下，回车后即可查看仿真波形。

gtkwave test.vcd




我们另外使用一个目录文件（本例中为 vfile.txt）来存储一个工程所要用到的所有 Verilog 文件，变量 ObjVFile 对应这个目录文件的路径、VcdFile 对应 testbench 中 dumpfile 命令的 .vcd 文件名称、ElfFile 对应编译预计生成的可执行文件的名称（这里默认使用 .out 的后缀，实际上随意）、变量 FileBuf 将目录文件内容读取并保存下来。

all: 对应的语句是 Makefile 的终极目标，即顺序执行编译、可视化和打开波形。

compile: 对应的语句表示编译从目录文件中读出来的所有 Verilog 文件。

visual: 对应的语句表示使用 vvp 工具依据编译后生成的可执行文件来产生波形文件。

sim: 对应的语句表示打开波形文件。

clean: 对应的语句表示删除中间文件。
